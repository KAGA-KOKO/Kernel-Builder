name: Kernel Builder by ismasrull

on:
  workflow_dispatch:
    inputs:
      KERNEL_URL:
        description: 'KernelUrl (if want to use SSH keys, use git@github.com:XXXXX)'
        required: true
        default: 'https://github.com/Rem01Gaming/liquid_kernel_realme_even.git'
        
      KERNEL_DEFCONFIG:
        description: 'DEFCONFIG (if want to use SSH keys, use git@github.com:XXXXX)'
        required: true
        default: 'even_defconfig'
        
      KERNEL_BRANCH:
        description: 'Kernel Branch'
        required: true
        default: 'OSS-RUI2'
        
        
      CLANG_URL:
        description: 'Clang Url'
        required: true
        default: 'https://gitlab.com/clangsantoni/zyc_clang.git'
      CLANG_BRANCH:
        description: 'Clang Branch'
        required: false
        default: ''
      AARCH64_URL:
        description: 'Arrch64-GCC'
        required: true
        default: 'https://github.com/EternalX-project/aarch64-linux-gnu.git'
      AARCH64_BRANCH:
        description: 'AARCH64-GCC BRANCH'
        required: false
        default: ''
      ARM_LINUX_URL:
        description: 'ARM-LINUX-GNU'
        required: true
        default: 'https://github.com/EternalX-project/arm-linux-gnueabi.git'
      ARM_LINUX_BRANCH:
        description: 'ARM LINUX GNU BRANCH'
        required: false
        default: ''
      ANYKERNEL_URL:
        description: 'YOUR ANYKERNEL LINK'
        required: true
        default: 'https://github.com/TheUnknownName/AnyKernel3.git'
      
      

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Display Run Parameters
      run: |
        echo "::group::User Environment Variables"
        echo "Kernel URL: ${{ github.event.inputs.KERNEL_URL }}"
        echo "Kernel Branch: ${{ github.event.inputs.KERNEL_BRANCH }}"
        echo "Kernel Defconfig: ${{ github.event.inputs.KERNEL_DEFCONFIG }}"
        echo "Clang URL: ${{ github.event.inputs.CLANG_URL }}"
        echo "Clang Branch: ${{ github.event.inputs.CLANG_BRANCH }}"
        echo "Aarch64-gnu Url: ${{ github.event.inputs.AARCH64_URL }}"
        echo "AARCH64-BRANCH: ${{ github.event.inputs.AARCH64_BRANCH }}"
        echo "Arm Linux GnubUrl: ${{ github.event.inputs.ARM_LINUX_URL }}"
        echo "Arm Linux Gny Branch: ${{ github.event.inputs.ARM_LINUX_BRANCH }}"
        echo "Downloading AnyKernel: ${{ github.event.inputs.ANYKERNEL_URL }}"
        echo "::endgroup::"
 
    # You might want to Checkout your repo first, but not mandatory
    - name: Check Out
      uses: actions/checkout@v3
    # Cleanup The Actions Workspace Using Custom Composite Run Actions
    
    - name: Cleanup
      uses: rokibhasansagar/slimhub_actions@main

      # That's it! Now use your normal steps
    - name: Prepare the environment
      run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache python2 python2-dev
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar
          sudo apt-get -y install gcc llvm lld python2 clang gcc-aarch64-linux-gnu git libxml2 device-tree-compiler default-jre automake lzop bison gperf build-essential zip curl zlib1g-dev libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make cpio optipng bc libstdc++6 libncurses5 wget python3 python3-pip libssl-dev rsync flex git-lfs libz3-dev libz3-4 axel tar binutils-dev ca-certificates ccache cmake file libelf-dev ninja-build python3-dev texinfo u-boot-tools xz-utils libarchive-tools software-properties-common build-essential python-is-python3 libssl-dev openssl ssh

    - name: Setup SSH Keys
      uses: webfactory/ssh-agent@v0.5.4
      with:
          ssh-private-key: |
              ${{ secrets.SSH_PRIVATE_KEY }}

    
#    - name: Install repo
#      run: |
#        mkdir ~/bin
#        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
#        chmod a+x ~/bin/repo
#        sudo ln -sf ~/bin/repo /usr/bin/repo
      
#    - name: Initialize repo
#      run: |
#        mkdir workspace
#        cd workspace
#        echo "workspace-folder=$(pwd)" >> $GITHUB_OUTPUT
#        git config --global user.name "cumaRull"
#        git config --global user.email "rulsmods@gmail.com"
#        repo init -depth=1 -u ${{ github.event.inputs.MANIFEST_URL }} -b ${{ github.event.inputs.MANIFEST_BRANCH }}
#      id: pwd
    
#    - name: Repo Sync
#      run: |
#        repo sync -j$(nproc --all) --force-sync
#      working-directory: workspace

    - name: Clone Clang And GCC
      run: |
       mkdir -p android && cd android
       git config --global advice.detachedHead false
       git clone --depth=1 ${{ github.event.inputs.CLANG_URL }} ./clang
       git clone --depth=1 ${{ github.event.inputs.AARCH64_URL }} ./aarch64-gcc
       git clone --depth=1 ${{ github.event.inputs.ARM_LINUX_URL }} ./aarch32-gcc
       git clone --depth=1 ${{ github.event.inputs.ANYKERNEL_URL }} ./AnyKernel
      

    - name: Clone kernel tree
      run: |
       cd android
       git clone --depth=1 --recurse-submodules -j8 --single-branch ${{ github.event.inputs.KERNEL_URL }} ./kernel
       

    - name: Set Swap Space
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 12


    - name: Set Properties
      run: |
        echo "BUILD_DATE=$(TZ=Asia/Jakarta date +%Y%m%d)" >> $GITHUB_ENV


    - name: Notify in Telegram
      run: |
             
              curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage" \
              -d chat_id="${{ secrets.TG_CHAT_ID }}" \
              -d text="Build Started With: <code>GithubAction</code>%0A USING DEFCONFIG:<b>${{ github.event.inputs.KERNEL_DEFCONFIG }}</b>%0AWITH BRANCH:<b>${{ github.event.inputs.KERNEL_BRANCH }}</b>Kernel Tree:${{ github.event.inputs.KERNEL_URL }}%0A%0AStarted On: <b>$(TZ=Asia/Jakarta date +%Y%m%d + time)</b>" \
              -d parse_mode=html \
              -d disable_web_page_preview=true
              
    - name: Building Kernel
      run: |
       
       cd android/kernel
       export ARCH=arm64
       make O=out ARCH=arm64 ${{ github.event.inputs.KERNEL_DEFCONFIG }}
       PATH="${GITHUB_WORKSPACE}/android/clang/bin:${PATH}:${GITHUB_WORKSPACE}/android/aarch32-gcc/bin:${PATH}:${GITHUB_WORKSPACE}/android/aarch64-gcc/bin:${PATH}" \
       make -j$(nproc --all) O=out \
       ARCH=arm64 \
       CC="clang" \
       CLANG_TRIPLE=aarch64-linux-gnu- \
       CROSS_COMPILE="${GITHUB_WORKSPACE}/android/aarch64-gcc/bin/aarch64-linux-gnu-" \
       CROSS_COMPILE_ARM32="${GITHUB_WORKSPACE}/android/aarch32-gcc/bin/arm-linux-gnueabihf-" \
       CONFIG_NO_ERROR_ON_MISMATCH=y 
       V=0
       cp out/arch/arm64/boot/Image.gz-dtb ~/AnyKernel

       
    - name: Zipping Kernel
      run: | 
             cd ${GITHUB_WORKSPACE}/android/AnyKernel
             zip -r9 KernelBuilds${{ github.event.inputs.KERNEL_DEFCONFIG }}.zip
    - name: Push To telegram
      run: |
            cd ${GITHUB_WORKSPACE}/android/AnyKernel
            push1=KernelBuilds${{ github.event.inputs.KERNEL_DEFCONFIG }}.zip
             
             curl -F document=@$push1 "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendDocument" \
              -F chat_id="${{ secrets.TG_CHAT_ID }}" \
              -F caption="<b>Build Finished!!</b>%0A Pushing \
              -F parse_mode=html \
              -F disable_web_page_preview=true
              
